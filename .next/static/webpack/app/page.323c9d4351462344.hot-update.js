"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/google-script.ts":
/*!******************************!*\
  !*** ./lib/google-script.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GOOGLE_SCRIPT_CONFIG: function() { return /* binding */ GOOGLE_SCRIPT_CONFIG; },\n/* harmony export */   fetchFromGoogleScript: function() { return /* binding */ fetchFromGoogleScript; },\n/* harmony export */   validatePatientData: function() { return /* binding */ validatePatientData; }\n/* harmony export */ });\n// Configuración para Google Apps Script\nconst GOOGLE_SCRIPT_CONFIG = {\n    // Usar proxy local para evitar problemas de CORS\n    url: \"/api/proxy\",\n    // URL directa (para cuando se configure CORS correctamente)\n    directUrl: \"https://script.google.com/macros/s/AKfycbzTg6wQCsc_sIMBKSk_4vpGcbhrS1kuUiNyPyvtzLsoVktqAhZC-XsLaC-TaGX_rW4d/exec\",\n    timeout: 10000,\n    retries: 3\n};\n// Función para hacer peticiones a Google Apps Script\nasync function fetchFromGoogleScript() {\n    const { url, timeout, retries } = GOOGLE_SCRIPT_CONFIG;\n    for(let attempt = 1; attempt <= retries; attempt++){\n        try {\n            console.log(\"Intento \".concat(attempt, \"/\").concat(retries, \" - Cargando datos desde Google Apps Script\"));\n            const controller = new AbortController();\n            const timeoutId = setTimeout(()=>controller.abort(), timeout);\n            const response = await fetch(url, {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                signal: controller.signal\n            });\n            clearTimeout(timeoutId);\n            if (!response.ok) {\n                throw new Error(\"Error HTTP: \".concat(response.status, \" - \").concat(response.statusText));\n            }\n            const result = await response.json();\n            console.log(\"Respuesta de Google Apps Script:\", result);\n            // Manejar diferentes formatos de respuesta\n            if (result && Array.isArray(result)) {\n                return result;\n            } else if (result && Array.isArray(result.data)) {\n                return result.data;\n            } else if (result && result.success && Array.isArray(result.data)) {\n                return result.data;\n            } else {\n                console.warn(\"Formato de respuesta inesperado:\", result);\n                throw new Error(\"Formato de datos no reconocido\");\n            }\n        } catch (error) {\n            console.error(\"Error en intento \".concat(attempt, \":\"), error);\n            if (attempt === retries) {\n                throw error;\n            }\n            // Esperar antes del siguiente intento\n            await new Promise((resolve)=>setTimeout(resolve, 1000 * attempt));\n        }\n    }\n    throw new Error(\"Todos los intentos fallaron\");\n}\n// Función para validar datos\nfunction validatePatientData(data) {\n    if (!Array.isArray(data)) return false;\n    return data.every((item)=>item && typeof item === \"object\" && typeof item.patient === \"string\" && typeof item.carrier === \"string\" && typeof item.office === \"string\" && typeof item.paidAmount === \"number\");\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9nb29nbGUtc2NyaXB0LnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHdDQUF3QztBQUNqQyxNQUFNQSx1QkFBdUI7SUFDbEMsaURBQWlEO0lBQ2pEQyxLQUFLO0lBQ0wsNERBQTREO0lBQzVEQyxXQUFXO0lBQ1hDLFNBQVM7SUFDVEMsU0FBUztBQUNYLEVBQUM7QUFVRCxxREFBcUQ7QUFDOUMsZUFBZUM7SUFDcEIsTUFBTSxFQUFFSixHQUFHLEVBQUVFLE9BQU8sRUFBRUMsT0FBTyxFQUFFLEdBQUdKO0lBRWxDLElBQUssSUFBSU0sVUFBVSxHQUFHQSxXQUFXRixTQUFTRSxVQUFXO1FBQ25ELElBQUk7WUFDRkMsUUFBUUMsR0FBRyxDQUFDLFdBQXNCSixPQUFYRSxTQUFRLEtBQVcsT0FBUkYsU0FBUTtZQUUxQyxNQUFNSyxhQUFhLElBQUlDO1lBQ3ZCLE1BQU1DLFlBQVlDLFdBQVcsSUFBTUgsV0FBV0ksS0FBSyxJQUFJVjtZQUV2RCxNQUFNVyxXQUFXLE1BQU1DLE1BQU1kLEtBQUs7Z0JBQ2hDZSxRQUFRO2dCQUNSQyxTQUFTO29CQUNQLGdCQUFnQjtnQkFDbEI7Z0JBQ0FDLFFBQVFULFdBQVdTLE1BQU07WUFDM0I7WUFFQUMsYUFBYVI7WUFFYixJQUFJLENBQUNHLFNBQVNNLEVBQUUsRUFBRTtnQkFDaEIsTUFBTSxJQUFJQyxNQUFNLGVBQW9DUCxPQUFyQkEsU0FBU1EsTUFBTSxFQUFDLE9BQXlCLE9BQXBCUixTQUFTUyxVQUFVO1lBQ3pFO1lBRUEsTUFBTUMsU0FBUyxNQUFNVixTQUFTVyxJQUFJO1lBQ2xDbEIsUUFBUUMsR0FBRyxDQUFDLG9DQUFvQ2dCO1lBRWhELDJDQUEyQztZQUMzQyxJQUFJQSxVQUFVRSxNQUFNQyxPQUFPLENBQUNILFNBQVM7Z0JBQ25DLE9BQU9BO1lBQ1QsT0FBTyxJQUFJQSxVQUFVRSxNQUFNQyxPQUFPLENBQUNILE9BQU9JLElBQUksR0FBRztnQkFDL0MsT0FBT0osT0FBT0ksSUFBSTtZQUNwQixPQUFPLElBQUlKLFVBQVVBLE9BQU9LLE9BQU8sSUFBSUgsTUFBTUMsT0FBTyxDQUFDSCxPQUFPSSxJQUFJLEdBQUc7Z0JBQ2pFLE9BQU9KLE9BQU9JLElBQUk7WUFDcEIsT0FBTztnQkFDTHJCLFFBQVF1QixJQUFJLENBQUMsb0NBQW9DTjtnQkFDakQsTUFBTSxJQUFJSCxNQUFNO1lBQ2xCO1FBRUYsRUFBRSxPQUFPVSxPQUFPO1lBQ2R4QixRQUFRd0IsS0FBSyxDQUFDLG9CQUE0QixPQUFSekIsU0FBUSxNQUFJeUI7WUFFOUMsSUFBSXpCLFlBQVlGLFNBQVM7Z0JBQ3ZCLE1BQU0yQjtZQUNSO1lBRUEsc0NBQXNDO1lBQ3RDLE1BQU0sSUFBSUMsUUFBUUMsQ0FBQUEsVUFBV3JCLFdBQVdxQixTQUFTLE9BQU8zQjtRQUMxRDtJQUNGO0lBRUEsTUFBTSxJQUFJZSxNQUFNO0FBQ2xCO0FBRUEsNkJBQTZCO0FBQ3RCLFNBQVNhLG9CQUFvQk4sSUFBVztJQUM3QyxJQUFJLENBQUNGLE1BQU1DLE9BQU8sQ0FBQ0MsT0FBTyxPQUFPO0lBRWpDLE9BQU9BLEtBQUtPLEtBQUssQ0FBQ0MsQ0FBQUEsT0FDaEJBLFFBQ0EsT0FBT0EsU0FBUyxZQUNoQixPQUFPQSxLQUFLQyxPQUFPLEtBQUssWUFDeEIsT0FBT0QsS0FBS0UsT0FBTyxLQUFLLFlBQ3hCLE9BQU9GLEtBQUtHLE1BQU0sS0FBSyxZQUN2QixPQUFPSCxLQUFLSSxVQUFVLEtBQUs7QUFFL0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbGliL2dvb2dsZS1zY3JpcHQudHM/MWQ0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb25maWd1cmFjacOzbiBwYXJhIEdvb2dsZSBBcHBzIFNjcmlwdFxyXG5leHBvcnQgY29uc3QgR09PR0xFX1NDUklQVF9DT05GSUcgPSB7XHJcbiAgLy8gVXNhciBwcm94eSBsb2NhbCBwYXJhIGV2aXRhciBwcm9ibGVtYXMgZGUgQ09SU1xyXG4gIHVybDogXCIvYXBpL3Byb3h5XCIsXHJcbiAgLy8gVVJMIGRpcmVjdGEgKHBhcmEgY3VhbmRvIHNlIGNvbmZpZ3VyZSBDT1JTIGNvcnJlY3RhbWVudGUpXHJcbiAgZGlyZWN0VXJsOiBcImh0dHBzOi8vc2NyaXB0Lmdvb2dsZS5jb20vbWFjcm9zL3MvQUtmeWNielRnNndRQ3NjX3NJTUJLU2tfNHZwR2NiaHJTMWt1VWlOeVB5dnR6THNvVmt0cUFoWkMtWHNMYUMtVGFHWF9yVzRkL2V4ZWNcIixcclxuICB0aW1lb3V0OiAxMDAwMCwgLy8gMTAgc2VndW5kb3NcclxuICByZXRyaWVzOiAzXHJcbn1cclxuXHJcbi8vIFRpcG9zIGRlIHJlc3B1ZXN0YSBlc3BlcmFkb3NcclxuZXhwb3J0IGludGVyZmFjZSBHb29nbGVTY3JpcHRSZXNwb25zZSB7XHJcbiAgc3VjY2VzczogYm9vbGVhblxyXG4gIGRhdGE/OiBhbnlbXVxyXG4gIGVycm9yPzogc3RyaW5nXHJcbiAgbWVzc2FnZT86IHN0cmluZ1xyXG59XHJcblxyXG4vLyBGdW5jacOzbiBwYXJhIGhhY2VyIHBldGljaW9uZXMgYSBHb29nbGUgQXBwcyBTY3JpcHRcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoRnJvbUdvb2dsZVNjcmlwdCgpOiBQcm9taXNlPGFueVtdPiB7XHJcbiAgY29uc3QgeyB1cmwsIHRpbWVvdXQsIHJldHJpZXMgfSA9IEdPT0dMRV9TQ1JJUFRfQ09ORklHXHJcbiAgXHJcbiAgZm9yIChsZXQgYXR0ZW1wdCA9IDE7IGF0dGVtcHQgPD0gcmV0cmllczsgYXR0ZW1wdCsrKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zb2xlLmxvZyhgSW50ZW50byAke2F0dGVtcHR9LyR7cmV0cmllc30gLSBDYXJnYW5kbyBkYXRvcyBkZXNkZSBHb29nbGUgQXBwcyBTY3JpcHRgKVxyXG4gICAgICBcclxuICAgICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKVxyXG4gICAgICBjb25zdCB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IGNvbnRyb2xsZXIuYWJvcnQoKSwgdGltZW91dClcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7XHJcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2lnbmFsOiBjb250cm9sbGVyLnNpZ25hbFxyXG4gICAgICB9KVxyXG4gICAgICBcclxuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZClcclxuICAgICAgXHJcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIEhUVFA6ICR7cmVzcG9uc2Uuc3RhdHVzfSAtICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKClcclxuICAgICAgY29uc29sZS5sb2coJ1Jlc3B1ZXN0YSBkZSBHb29nbGUgQXBwcyBTY3JpcHQ6JywgcmVzdWx0KVxyXG4gICAgICBcclxuICAgICAgLy8gTWFuZWphciBkaWZlcmVudGVzIGZvcm1hdG9zIGRlIHJlc3B1ZXN0YVxyXG4gICAgICBpZiAocmVzdWx0ICYmIEFycmF5LmlzQXJyYXkocmVzdWx0KSkge1xyXG4gICAgICAgIHJldHVybiByZXN1bHRcclxuICAgICAgfSBlbHNlIGlmIChyZXN1bHQgJiYgQXJyYXkuaXNBcnJheShyZXN1bHQuZGF0YSkpIHtcclxuICAgICAgICByZXR1cm4gcmVzdWx0LmRhdGFcclxuICAgICAgfSBlbHNlIGlmIChyZXN1bHQgJiYgcmVzdWx0LnN1Y2Nlc3MgJiYgQXJyYXkuaXNBcnJheShyZXN1bHQuZGF0YSkpIHtcclxuICAgICAgICByZXR1cm4gcmVzdWx0LmRhdGFcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ0Zvcm1hdG8gZGUgcmVzcHVlc3RhIGluZXNwZXJhZG86JywgcmVzdWx0KVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRm9ybWF0byBkZSBkYXRvcyBubyByZWNvbm9jaWRvJylcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGVuIGludGVudG8gJHthdHRlbXB0fTpgLCBlcnJvcilcclxuICAgICAgXHJcbiAgICAgIGlmIChhdHRlbXB0ID09PSByZXRyaWVzKSB7XHJcbiAgICAgICAgdGhyb3cgZXJyb3JcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gRXNwZXJhciBhbnRlcyBkZWwgc2lndWllbnRlIGludGVudG9cclxuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMDAgKiBhdHRlbXB0KSlcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgdGhyb3cgbmV3IEVycm9yKCdUb2RvcyBsb3MgaW50ZW50b3MgZmFsbGFyb24nKVxyXG59XHJcblxyXG4vLyBGdW5jacOzbiBwYXJhIHZhbGlkYXIgZGF0b3NcclxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUGF0aWVudERhdGEoZGF0YTogYW55W10pOiBib29sZWFuIHtcclxuICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkpIHJldHVybiBmYWxzZVxyXG4gIFxyXG4gIHJldHVybiBkYXRhLmV2ZXJ5KGl0ZW0gPT4gXHJcbiAgICBpdGVtICYmIFxyXG4gICAgdHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnICYmXHJcbiAgICB0eXBlb2YgaXRlbS5wYXRpZW50ID09PSAnc3RyaW5nJyAmJlxyXG4gICAgdHlwZW9mIGl0ZW0uY2FycmllciA9PT0gJ3N0cmluZycgJiZcclxuICAgIHR5cGVvZiBpdGVtLm9mZmljZSA9PT0gJ3N0cmluZycgJiZcclxuICAgIHR5cGVvZiBpdGVtLnBhaWRBbW91bnQgPT09ICdudW1iZXInXHJcbiAgKVxyXG59ICJdLCJuYW1lcyI6WyJHT09HTEVfU0NSSVBUX0NPTkZJRyIsInVybCIsImRpcmVjdFVybCIsInRpbWVvdXQiLCJyZXRyaWVzIiwiZmV0Y2hGcm9tR29vZ2xlU2NyaXB0IiwiYXR0ZW1wdCIsImNvbnNvbGUiLCJsb2ciLCJjb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyIiwidGltZW91dElkIiwic2V0VGltZW91dCIsImFib3J0IiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJzaWduYWwiLCJjbGVhclRpbWVvdXQiLCJvayIsIkVycm9yIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsInJlc3VsdCIsImpzb24iLCJBcnJheSIsImlzQXJyYXkiLCJkYXRhIiwic3VjY2VzcyIsIndhcm4iLCJlcnJvciIsIlByb21pc2UiLCJyZXNvbHZlIiwidmFsaWRhdGVQYXRpZW50RGF0YSIsImV2ZXJ5IiwiaXRlbSIsInBhdGllbnQiLCJjYXJyaWVyIiwib2ZmaWNlIiwicGFpZEFtb3VudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/google-script.ts\n"));

/***/ })

});