"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/google-script.ts":
/*!******************************!*\
  !*** ./lib/google-script.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GOOGLE_SCRIPT_CONFIG: function() { return /* binding */ GOOGLE_SCRIPT_CONFIG; },\n/* harmony export */   fetchFromGoogleScript: function() { return /* binding */ fetchFromGoogleScript; },\n/* harmony export */   validatePatientData: function() { return /* binding */ validatePatientData; }\n/* harmony export */ });\n// Configuración para Google Apps Script\nconst GOOGLE_SCRIPT_CONFIG = {\n    // URL directa (para cuando se configure CORS correctamente)\n    url: \"https://script.google.com/macros/s/AKfycbz-hSsHHk5lcYtRc_XLC20hV24XneVFSLbrm-MuYnaJYqWHJZ75JjU1E6GtCe6oF6yQ/exec\",\n    timeout: 10000,\n    retries: 3,\n    // Usar proxy local para evitar CORS\n    useProxy: true,\n    // Usar datos reales ahora que el script funciona\n    useFallbackData: false\n};\n// Datos de ejemplo para usar cuando hay problemas de conexión\nconst fallbackData = [\n    {\n        timestamp: \"2024-01-15T10:30:00Z\",\n        carrier: \"Delta Dental\",\n        office: \"Downtown Office\",\n        patient: \"John Smith\",\n        paidAmount: 150.00,\n        claimStatus: \"Paid\",\n        type: \"Cleaning\",\n        dob: \"1985-03-15\",\n        dos: \"2024-01-10\",\n        productivityAmount: 200.00,\n        status: \"Completed\"\n    },\n    {\n        timestamp: \"2024-01-15T11:15:00Z\",\n        carrier: \"Aetna\",\n        office: \"Uptown Office\",\n        patient: \"Sarah Johnson\",\n        paidAmount: 300.00,\n        claimStatus: \"Pending\",\n        type: \"Root Canal\",\n        dob: \"1990-07-22\",\n        dos: \"2024-01-12\",\n        productivityAmount: 450.00,\n        status: \"In Progress\"\n    },\n    {\n        timestamp: \"2024-01-15T12:00:00Z\",\n        carrier: \"Cigna\",\n        office: \"Downtown Office\",\n        patient: \"Mike Davis\",\n        paidAmount: 75.00,\n        claimStatus: \"Denied\",\n        type: \"Checkup\",\n        dob: \"1978-11-08\",\n        dos: \"2024-01-08\",\n        productivityAmount: 100.00,\n        status: \"Needs Review\"\n    },\n    {\n        timestamp: \"2024-01-15T13:45:00Z\",\n        carrier: \"Blue Cross\",\n        office: \"Downtown Office\",\n        patient: \"Emily Wilson\",\n        paidAmount: 225.00,\n        claimStatus: \"Paid\",\n        type: \"Crown\",\n        dob: \"1982-05-14\",\n        dos: \"2024-01-14\",\n        productivityAmount: 300.00,\n        status: \"Completed\"\n    },\n    {\n        timestamp: \"2024-01-15T14:20:00Z\",\n        carrier: \"MetLife\",\n        office: \"Uptown Office\",\n        patient: \"Robert Brown\",\n        paidAmount: 180.00,\n        claimStatus: \"Pending\",\n        type: \"Extraction\",\n        dob: \"1975-12-03\",\n        dos: \"2024-01-13\",\n        productivityAmount: 250.00,\n        status: \"In Progress\"\n    }\n];\n// Función para hacer peticiones a Google Apps Script\nasync function fetchFromGoogleScript() {\n    const { url, timeout, retries, useFallbackData, useProxy } = GOOGLE_SCRIPT_CONFIG;\n    // Si está configurado para usar datos de ejemplo, devolver directamente\n    if (useFallbackData) {\n        console.log(\"Usando datos de ejemplo (modo de desarrollo)\");\n        return fallbackData;\n    }\n    for(let attempt = 1; attempt <= retries; attempt++){\n        try {\n            console.log(\"Intento \".concat(attempt, \"/\").concat(retries, \" - Cargando datos desde Google Apps Script\"));\n            const controller = new AbortController();\n            const timeoutId = setTimeout(()=>controller.abort(), timeout);\n            // Usar proxy si está configurado\n            const fetchUrl = useProxy ? \"/api/proxy\" : url;\n            const response = await fetch(fetchUrl, {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                signal: controller.signal\n            });\n            clearTimeout(timeoutId);\n            if (!response.ok) {\n                throw new Error(\"Error HTTP: \".concat(response.status, \" - \").concat(response.statusText));\n            }\n            const result = await response.json();\n            console.log(\"Respuesta de Google Apps Script:\", result);\n            // Manejar diferentes formatos de respuesta\n            if (result && Array.isArray(result)) {\n                return result;\n            } else if (result && Array.isArray(result.data)) {\n                return result.data;\n            } else if (result && result.success && Array.isArray(result.data)) {\n                return result.data;\n            } else {\n                console.warn(\"Formato de respuesta inesperado:\", result);\n                throw new Error(\"Formato de datos no reconocido\");\n            }\n        } catch (error) {\n            console.error(\"Error en intento \".concat(attempt, \":\"), error);\n            if (attempt === retries) {\n                throw error;\n            }\n            // Esperar antes del siguiente intento\n            await new Promise((resolve)=>setTimeout(resolve, 1000 * attempt));\n        }\n    }\n    throw new Error(\"Todos los intentos fallaron\");\n}\n// Función para validar datos\nfunction validatePatientData(data) {\n    if (!Array.isArray(data)) return false;\n    return data.every((item)=>item && typeof item === \"object\" && typeof item.patient === \"string\" && typeof item.carrier === \"string\" && typeof item.office === \"string\" && typeof item.paidAmount === \"number\");\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/google-script.ts\n"));

/***/ })

});